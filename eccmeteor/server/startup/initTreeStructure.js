//更新树结构 和 监视器 信息//更新更加详细的monitor信息  需要在SVSE数据库更新后才能调用initTreeDataMonitor = function(debug){	if(debug === -1)return;	//SvseTree.find()	var entities = Svse.find({"type":"entity"},{fields:{sv_id:1,submonitor:1}}).fetch();	for(x in entities){		var submonitor = entities[x]["submonitor"];		if(!submonitor  || !submonitor.length)		{			Log4js.info("设备无监视器："+entities[x]["sv_id"]);			continue;		}		var sv_id = entities[x]["sv_id"];		var result = SvseMethodsOnServer.svGetDefaultTreeData(sv_id,false);		if(!result){			Log4js.info("失败时，监视器的父节点："+sv_id);			Log4js.info("initTreeDataMonitor svGetDefaultTreeData exists errors",-1);			return;		}		for(y in result){			SvseTree.insert(result[y],function(err,r_id){				if(err)					Log4js.info(err);			});		}	}}//寻找树的子节点 svse的操作var initSvseTreeNodeAtStartUp = function(id,parentid,type){	var result = SvseMethodsOnServer.svGetTreeDataChildrenNodes(id,type);	if(!result){		Log4js.info("initSvseTreeNodeAtStartUp failed， svGetTreeDataChildrenNodes exists errors",-1);		return;	}	var obj = {		"parentid"	: parentid,		"sv_id"		: id,		"type"		: type	};	if (result['subentity'] || result['subgroup']) {		obj["has_son"] = true;	}	if (type !== "entity") {		var entities = result['subentity'];		var subentity = [];		for (entity in entities) {			subentity.push(entity);			initSvseTreeNodeAtStartUp(entity, id, "entity");		}		var groups = result['subgroup'];		var subgroup = [];		for (group in groups) {			subgroup.push(group);			initSvseTreeNodeAtStartUp(group, id, "group");		}		obj["subentity"] = subentity;		obj["subgroup"] = subgroup;		if(type === "group")			obj["property"] = result["property"]	}else{		var moitors = result['submonitor'];		var submonitor = [];		for (moitor in moitors) {			submonitor.push(moitor);		}		obj["submonitor"] = submonitor;	}		Svse.insert(obj, function (err, r_id) {		if (err) 			Log4js.info("插入子节点" + id + "失败");	});	}//初始化树结构 svse 的操作initSvseTreeStructureAtStartUp = function(debug){	Log4js.info("初始化数据结构开始...");	if(debug === -1)return;	if(debug === 0){		Svse.remove({});		Log4js.info("Svse date is clear");	}	var result = SvseMethodsOnServer.svGetDefaultTreeData('default',true);	if(!result){		Log4js.info("initSvseTreeStructureAtStartUp failed， svGetDefaultTreeData exists errors",-1);		return;	}	for(son in result){			var parentid = "0";		var sv_id = result[son]["sv_id"];		var type = result[son]["type"];		initSvseTreeNodeAtStartUp(sv_id,parentid,type);	}	Log4js.info("初始化数据结构完成!");		Log4js.info("初始化监视器节点信息开始")	initTreeDataMonitor(debug);	Log4js.info("初始化监视器节点信息完成")}