var SvseDaoOnServer = {	removeNodesById:function(id){//删除节点及其子节点		var node = Svse.findOne({sv_id:id});		SystemLogger("删除id: "+id);		Svse.remove({sv_id:id});		SvseTree.remove({sv_id:id});		//如果没有子节点		if(!node||!node["has_son"])return;		//存在子节点		if(node["type"] === "entity"){ //如果是设备 直接移除子节点监视器			SvseEntityTemplateInfo.remove({"return.id":id}); //从设备信息里面移除设备			var childrenId = node["submonitor"];			if(!childrenId)return;			SvseTree.remove({sv_id:{$in:childrenId}});			return;		}		var ids = [];		if(node["subentity"]) ids = node["subentity"];		if(node["subgroup"])  ids = ids.concat(node["subgroup"]);		for(index in ids){			SvseDaoOnServer.removeNodesById(ids[index]);		}	}}var SvseTreeDaoOnServer = {	//根据父节点id和本身Id插入节点	getNodeByParentIdAndId:function(parentid,id){		var dowhat = {		'dowhat' : 'GetTreeData',		'parentid' : parentid		}		var node = {};		var result = SvseMethodsOnServer.svForest(dowhat);		if(!result)throw new Meteor.Error(500,"SvseTreeDaoOnServer.getNodeByParentIdAndId has errors");		for(index in result){			if(result[index]["sv_id"] === id){				node = result[index];					break;			}			}		return node;	}}var SvseMonitorDaoOnServer = {	addMonitor : function(monitor,parentid){		var r_monitor = SvseMethodsOnServer.svSubmitMonitor(monitor,parentid);		if(!r_monitor)throw new Meteor.Error(500,"SvseMonitorDaoOnServer.addMonitor");		SystemLogger("添加监视器成功，监视器是：");		console.log(r_monitor);		console.log("刷新监视");		var selfId = r_monitor["return"]["id"];		SystemLogger("selfId is "+selfId+ "===== parentid is" + parentid);		up_monitor = SvseMethodsOnServer.svRefreshMonitors(selfId,parentid,false);		console.log("刷新后的监视器是");		console.log(up_monitor[selfId])		return up_monitor[selfId];		/*		//var RefreshData = SvseMethodsOnServer.svGetLatestRefresh(up_monitor["return"]["queueName"]);		//console.log(" isDone==true时是");		console.log("svGetRefreshed====================");		console.log(1);		SvseMonitorDaoOnServer.$referesh(up_monitor["return"]["queueName"],parentid);		console.log(2);		//SvseMethodsOnServer.svGetRefreshed(up_monitor["return"]["queueName"],parentid)		//console.log(" svGetRefreshed后是");		//console.log(RefreshData);		console.log(up_monitor);		return up_monitor[selfId];		*/	},	getMonitorInfoById:function(id){		var r_monitor = SvseMethodsOnServer.svGetMonitor(id);		if(!r_monitor) throw new Meteor.Error(500,"SvseMonitorDaoOnServer.addMonitor");		return r_monitor;	},	editMonitor : function(monitor,parentid){		var r_monitor =  SvseMethodsOnServer.svSubmitMonitor(monitor);		if(!r_monitor)throw new Meteor.Error(500,"SvseMonitorDaoOnServer.editMonitor");		SystemLogger("添加监视器成功，监视器是：");		console.log(r_monitor);		console.log("刷新监视");		var selfId = r_monitor["return"]["id"];		SystemLogger("selfId is "+selfId+ "===== parentid is" + parentid);		up_monitor = SvseMethodsOnServer.svRefreshMonitors(selfId,parentid,false);		console.log("刷新后的监视器是");		console.log(up_monitor[selfId])		return up_monitor[selfId];	}}