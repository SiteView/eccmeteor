var zTreeViewTopN = function(){};Object.defineProperty(zTreeViewTopN,"initTree",{	value:function(type){		zTreeViewTopN.drawSvseSimpleTree(type);	}});//获取缩略的监视器树的数据（不包含没有设备的组）Object.defineProperty(zTreeViewTopN,"getSimpleTreeData",{	value:function(type){ //包含监视器			var nodes = Svse.find().fetch();		var branch = [];		for(index in nodes){			var obj = nodes[index];			if(obj["type"] == "group" && obj["subentity"]&& (obj["subentity"].length == 0)){				continue;			}			if(!SvseDao.hasDisplayPermission(obj["sv_id"])){				continue;			}			var branchNode = {};			var treeNode = SvseTree.findOne({sv_id:obj["sv_id"]});			branchNode["id"] = obj["sv_id"];			branchNode["pId"] = obj["parentid"];			branchNode["type"] = obj["type"];			branchNode["name"] = SvseTree.findOne({sv_id:obj["sv_id"]})["sv_name"];			branchNode["isParent"] = true;			branchNode["icon"] = "imag/status/"+obj["type"]+(treeNode["status"]?treeNode["status"]:"")+".png";			if(branchNode["pId"] === "0") branchNode["open"] = true;			if(obj["type"] === "entity" && obj["submonitor"] && obj["submonitor"].length){					var submonitor = obj["submonitor"];				console.log("------------");				for(subindex in submonitor){					var subobj = {};					var monitor = SvseTree.findOne({sv_id:submonitor[subindex]})					console.log("~~~~~~~~~~");					console.log(monitor);					console.log("------------");					console.log(monitor["sv_name"]);					console.log("!!!!!");					subobj["id"] = submonitor[subindex];					subobj["pId"] = obj["sv_id"];					subobj["type"] = "monitor";					subobj["name"] = monitor["sv_name"];					subobj["icon"] = "imag/status/monitor"+(monitor["status"]?monitor["status"]:"")+".png";					branch.push(subobj);				}			}			branch.push(branchNode);		}		return branch;	}});Object.defineProperty(zTreeViewTopN,"drawSvseSimpleTree",{	value:function(type){		var _self = this;		console.log("type:"+type);		var data = zTreeViewTopN.getSimpleTreeData(type);		console.log(data);				var setting = {			check:{					enable: true,					chkStyle: "checkbox",					chkboxType: { "Y": "ps", "N": "ps" }				},			data: {				simpleData: {					enable: true,					idKey: "id",					pIdKey: "pId",					rootPId: "0",				}			},					}		if(!$.fn.zTree){			return ;		}		var zTree = $.fn.zTree.init($("#svse_tree_check_topNadd"), setting,data);				//console.log(treeNode);			console.log("..36");		//显示对应检测器事件		 // var monitor;		 // if(monitor["sv_name"] == monitorname){		 // console.log("PPPPPP");		 		 		 //}				}	});var topN_add = function(){};Template.topNofadd.rendered = function(){//监视器选择树	$(function(){		var _self = this;		var type = $("#Typelist").val();		var data = zTreeViewTopN.getSimpleTreeData(type);		console.log("00000000000");		console.log(data);		console.log("00000000000");				console.log(data);		var setting = {			check:{				enable: true,				chkStyle: "checkbox",				chkboxType: { "Y": "ps", "N": "ps" }			},			callback:{				Change:function (event, treeId, treeNode) {						zTree = $.fn.zTree.getZTreeObj("#svse_tree_check_topNadd");				}						},			data: {				simpleData: {					enable: true,					idKey: "id",					pIdKey: "pId",					rootPId: "0",				}			}		};		$.fn.zTree.init($("#svse_tree_check_topNadd"), setting, data);			});//弹窗移动    ModalDrag.draggable("#topNofadddiv");}//点击保存、取消按钮时的事件Template.topNofadd.events = {    'change #Typelist': function(evt) {		var type = $("#Typelist").val();		console.log(type);		getMonitorData(type);				console.log();		zTreeViewTopN.initTree(type);		console.log("树的重构！！！！！");	},    "change #reporttypePeriodlist":function(){	              if(document.getElementById("reporttypePeriodlist").value=="Week"){			                    document.getElementById("topNtypetemplatelist").disabled=false;           }		    else{				 document.getElementById("topNtypetemplatelist").disabled=true;				}        },		        "click #topNofaddcancelbtn":function(e,t){				RenderTemplate.hideParents(t);				},					          "click #topNofaddsavebtn":function(e,t){			var targets = [];			var basicinfooftopNadd = ClientUtils.formArrayToObject($("#basicinfooftopNadd").serializeArray());			var arr = $.fn.zTree.getZTreeObj("svse_tree_check_topNadd").getNodesByFilter(function(node){return (node.checked && node.type === "monitor")});				for(index in arr){				targets.push(arr[index].id);				}				basicinfooftopNadd["GroupRight"] = targets.join();								$(":checkbox[name='Status']").each(function(){				if(!this.checked) basicinfooftopNadd["Status"]="Yes";			});			//报告标题是否为空			var Title=basicinfooftopNadd["Title"];				if(!Title){					Message.info("请填写标题！",{align:"center",time:3});					return;			}			//报告标题是否重复判断			var result=SvseTopNDao.getTopNByName(Title);				if(result){					Message.info("报告标题已经存在!",{align:"center",time:3});					return;			}			//E-mail的判断			var email=basicinfooftopNadd["EmailSend"];							if(!email){					Message.info("E-mail不能为空！",{align:"center",time:3});					 //alert("邮件中必须包含@");					return;			 }			 //判断邮箱格式是否正确  			var mailStr =  'aa@bb.com;bb@aa.com;cc@aa.com';			var mail_arr =mailStr.split(";");			 //if(!/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(email))      {  				if(!/^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*([,;][,;\s]*(\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*)*)*$/.test(email))      {   		            Message.info("E-mail格式错误!");   		            return false;			}			var nIndex = new Date().format("yyyyMMddhhmmss") +"x"+ Math.floor(Math.random()*1000);			for(index in arr){				targets.push(arr[index].id);			}			basicinfooftopNadd["AlertTarget"] = targets.join();				if(!basicinfooftopNadd["AlertTarget"]){					Message.info("监测范围不能为空",{align:"center",time:3});					return;			}							var nIndex = Utils.getUUID();			basicinfooftopNadd["nIndex"] = nIndex			var address = {};							address[nIndex] = basicinfooftopNadd;				console.log(address[nIndex]); 			  				SvseTopNDao.addTopN(nIndex,address,function(result){				SystemLogger(result);				console.log(result); 				RenderTemplate.hideParents(t);				  });				  			}    }//检测器数据的获取	var getMonitorData = function(type){		var svsetreedata = SvseTree.find().fetch();		console.log(svsetreedata);		var monitorIds = []; 		for(i in svsetreedata){			if(svsetreedata[i]["type"] == "monitor"){				monitorIds.push(svsetreedata[i]["sv_id"]);			}		}		//console.log(monitorIds);		var svsedata = Svse.find().fetch();		var entityids = [];		for(var j = 0;j < monitorIds.length;j++){			for(s in svsedata){				var data = svsedata[s];				if(data["type"] == "entity" && data["submonitor"] && data["submonitor"].length > 0){					var submonitorids = data["submonitor"];					for(sub in submonitorids){						if(monitorIds[j] == submonitorids[sub]){							entityids.push(data["sv_id"]);						}					}				}			}		}		//console.log(entityids);		//去重复		var rec = [];		var entityidsData = [];		for(var k = 0;k < entityids.length;k++){			if(!rec[entityids[k]]){				rec[entityids[k]] = true;				entityidsData.push(entityids[k]);			}					}		//console.log(entityidsData);		SvseMonitorTemplateDao.getMonitorInfoByIdAsync(monitorIds,entityidsData,function(result){			var context = result.context;				console.log(context);				var monitorTypes = [];			var monitorData = [];			for(i in context){				var results = {};				monitorTypes.push(context[i].monitorType);				results["monitorType"] = context[i].monitorType;				var returnItems = context[i].MonityTemplateReturnItems;				var itemsLabels = [];				for(j in returnItems){					itemsLabels.push(returnItems[j].sv_label);					results["itemsLabel"] = itemsLabels;						}				//console.log(results);				monitorData.push(results);			}			console.log(monitorData);			//去重复			var rec = [];			var resultData = [];			for(m in monitorData){				//console.log(monitorData[m]);				if(!rec[monitorData[m]["monitorType"]]){					rec[monitorData[m]["monitorType"]] = true;					resultData.push(monitorData[m]);				}							}					console.log(resultData);			//数据循环			var itemsLabel = [];			for(i in resultData){				if(resultData[i]["monitorType"] == type){					var items = resultData[i]["itemsLabel"]					$("#marklist").empty();					for(j in items){												var option = $("<option value="+items[j]+"></option>").html(items[j])						$("#marklist").append(option);						}				}			}			});	}	   