{"version":3,"file":"\\packages\\router:tests.js","sources":["router/tests\\router_server_tests.js","router/tests\\router_common_tests.js"],"names":[],"mappings":";;;;;;;;AAAA,+C;AACA,E;AACA,2C;;AAEA,2C;AACA,uB;;AAEA,oD;AACA,+C;AACA,kB;AACA,K;;AAEA,6D;AACA,4B;AACA,K;;AAEA,+D;AACA,mC;;AAEA,kE;AACA,iC;AACA,mC;AACA,G;;AAEA,yD;AACA,yD;AACA,c;AACA,I;;AAEA,2E;AACA,sC;AACA,G;;;AAGA,oE;AACA,qB;AACA,2D;AACA,mC;AACA,8B;AACA,yB;AACA,2B;AACA,K;;AAEA,iE;AACA,mC;AACA,mC;AACA,iD;;AAEA,yD;AACA,iE;AACA,mC;AACA,mC;AACA,iD;;AAEA,iE;AACA,mC;AACA,mC;;AAEA,iE;AACA,mC;;AAEA,iE;AACA,mC;;AAEA,iE;AACA,mC;AACA,G;;;AAGA,0D;AACA,mD;AACA,6H;AACA,2B;AACA,2B;AACA,mC;AACA,U;;AAEA,sB;AACA,K;;AAEA,mE;AACA,6C;AACA,G;;;AAGA,6E;AACA,sC;AACA,0D;AACA,mC;AACA,2D;AACA,mC;AACA,G;;;AAGA,0E;AACA,6C;AACA,kD;AACA,0D;AACA,mC;AACA,2D;AACA,uC;AACA,0D;AACA,0C;AACA,sC;AACA,G;;;;;;;;;;;;;;;;;;;ACxGA,6C;AACA,qD;AACA,E;AACA,kB;AACA,0D;AACA,8B;AACA,E;AACA,c;AACA,0D;AACA,yB;AACA,E;AACA,4D;AACA,qD;AACA,G","sourcesContent":["// XXX: is it OK to assume localhost:3000 here?\r\n//\r\n// it seems that stream does in it's tests.\r\n\r\n// Force serving before Meteor fully starts\r\nMeteor.Router._start();\r\n\r\nTinytest.add(\"Simple Router.serve\", function(test) {\r\n  Meteor.Router.add('/server/foo', function() {\r\n    return 'data';\r\n  });\r\n\r\n  Meteor.Router.add(/server\\/page\\/(\\d+)/, function(number) {\r\n    return [number, 'page'];\r\n  });\r\n\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/foo'));\r\n  test.equal(resp.content, 'data');\r\n\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/page/7'));\r\n  test.equal(resp.statusCode, 7);\r\n  test.equal(resp.content, 'page');\r\n});\r\n\r\nTinytest.add(\"Router.serve with params\", function(test) {\r\n  Meteor.Router.add('/server/bar/:id.xml', function(id) {\r\n    return id;\r\n  })\r\n\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/bar/content.xml'));\r\n  test.equal(resp.content, 'content');\r\n});\r\n\r\n\r\nTinytest.add(\"Router.serve various response types\", function(test) {\r\n  Meteor.Router.add({\r\n    '/server/baz-1': [201, {'x-my-header': 'Baz'}, 'data'],\r\n    '/server/baz-2': [202, 'data'],\r\n    '/server/baz-3': ['data'],\r\n    '/server/baz-4': 203,\r\n    '/server/baz-5': 'data'\r\n  });\r\n\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-1'));\r\n  test.equal(resp.statusCode, 201);\r\n  test.equal(resp.content, 'data');\r\n  test.equal(resp.headers['x-my-header'], 'Baz');\r\n\r\n  // grab it again to make sure we aren't messing with it\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-1'));\r\n  test.equal(resp.statusCode, 201);\r\n  test.equal(resp.content, 'data');\r\n  test.equal(resp.headers['x-my-header'], 'Baz');\r\n\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-2'));\r\n  test.equal(resp.statusCode, 202);\r\n  test.equal(resp.content, 'data');\r\n\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-3'));\r\n  test.equal(resp.content, 'data');\r\n\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-4'));\r\n  test.equal(resp.statusCode, 203);\r\n\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/baz-5'));\r\n  test.equal(resp.content, 'data');\r\n});\r\n\r\n\r\nTinytest.add(\"Router.serve with futures\", function(test) {\r\n  Meteor.Router.add('/server/delayed', function() {\r\n    var Future = (typeof(Npm) == \"undefined\") ? __meteor_bootstrap__.require(\"fibers/future\") : Npm.require(\"fibers/future\");\r\n    var fut = new Future();\r\n    setTimeout(function() {\r\n      fut.return('foo-in-timeout');\r\n    }, 1);\r\n\r\n    return fut.wait();\r\n  });\r\n\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('server/delayed'));\r\n  test.equal(resp.content, 'foo-in-timeout');\r\n});\r\n\r\n\r\nTinytest.add(\"Router.serve without http method restriction\", function(test) {\r\n  Meteor.Router.add('/bat-1', 'data');\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('bat-1'));\r\n  test.equal(resp.content, 'data');\r\n  var resp = Meteor.http.post(Meteor.absoluteUrl('bat-1'));\r\n  test.equal(resp.content, 'data');\r\n});\r\n\r\n\r\nTinytest.add(\"Router.serve with http method restriction\", function(test) {\r\n  Meteor.Router.add('/bat-2', 'GET', 'data');\r\n  Meteor.Router.add('/bat-2', 'POST', 'postdata');\r\n  var resp = Meteor.http.get(Meteor.absoluteUrl('bat-2'));\r\n  test.equal(resp.content, 'data');\r\n  var resp = Meteor.http.post(Meteor.absoluteUrl('bat-2'));\r\n  test.equal(resp.content, 'postdata');\r\n  var resp = Meteor.http.put(Meteor.absoluteUrl('bat-2'));\r\n  test.notEqual(resp.content, 'postdata');\r\n  test.notEqual(resp.content, 'data');\r\n});\r\n","Tinytest.add(\"Route basics\", function(test) {\r\n  var route = new Meteor.Router.Route('/posts/:_id');\r\n  \r\n  var params = {};\r\n  test.equal(route.match('/posts/7', null, params), true);\r\n  test.equal(params._id, '7');\r\n  \r\n  params = {};\r\n  test.equal(route.match('/posts/', null, params), false);\r\n  test.equal(params, {});\r\n  \r\n  test.equal(route.pathWithContext({_id: 10}), '/posts/10');\r\n  test.equal(route.pathWithContext(10), '/posts/10');\r\n});"]}