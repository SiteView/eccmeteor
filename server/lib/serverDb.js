var SvseDaoOnServer = {	removeNodesById:function(id){//删除节点及其子节点		var node = Svse.findOne({sv_id:id});		SystemLogger("删除id: "+id);		Svse.remove({sv_id:id});		SvseTree.remove({sv_id:id});		//如果没有子节点		if(!node||!node["has_son"])return;		//存在子节点		if(node["type"] === "entity"){ //如果是设备 直接移除子节点监视器			SvseEntityTemplateInfo.remove({"return.id":id}); //从设备信息里面移除设备			var childrenId = node["submonitor"];			if(!childrenId)return;			SvseTree.remove({sv_id:{$in:childrenId}});			return;		}		var ids = [];		if(node["subentity"]) ids = node["subentity"];		if(node["subgroup"])  ids = ids.concat(node["subgroup"]);		for(index in ids){			SvseDaoOnServer.removeNodesById(ids[index]);		}	}}var SvseTreeDaoOnServer = {	//根据父节点id和本身Id插入节点	getNodeByParentIdAndId:function(parentid,id){		var dowhat = {		'dowhat' : 'GetTreeData',		'parentid' : parentid		}		var flag = 1;		var node = {};		var result = SvseMethodsOnServer.svForest(dowhat);		if(!result)throw new Meteor.Error(500,"SvseTreeDaoOnServer.getNodeByParentIdAndId has errors");		for(index in result){			if(result[index]["sv_id"] === id){				node = result[index];					break;			}			}		if(flag == 1)return node;	}}